{
  "name": "tooltip",
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [],
  "files": [
    {
      "name": "tooltip.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { withCn, withProps } from '@udecode/cn';\n\nexport const TooltipProvider = TooltipPrimitive.Provider;\nexport const Tooltip = TooltipPrimitive.Root;\nexport const TooltipTrigger = TooltipPrimitive.Trigger;\nexport const TooltipPortal = TooltipPrimitive.Portal;\n\nexport const TooltipContent = withCn(\n  withProps(TooltipPrimitive.Content, {\n    sideOffset: 4,\n  }),\n  'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md'\n);\n\nexport function withTooltip<\n  T extends React.ComponentType<any> | keyof HTMLElementTagNameMap,\n>(Component: T) {\n  return React.forwardRef<\n    React.ElementRef<T>,\n    React.ComponentPropsWithoutRef<T> & {\n      tooltip?: React.ReactNode;\n      tooltipContentProps?: Omit<\n        React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>,\n        'children'\n      >;\n      tooltipProps?: Omit<\n        React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>,\n        'children'\n      >;\n    }\n  >(function ExtendComponent(\n    { tooltip, tooltipContentProps, tooltipProps, ...props },\n    ref\n  ) {\n    const [mounted, setMounted] = React.useState(false);\n\n    React.useEffect(() => {\n      setMounted(true);\n    }, []);\n\n    const component = <Component ref={ref} {...(props as any)} />;\n\n    if (tooltip && mounted) {\n      return (\n        <Tooltip {...tooltipProps}>\n          <TooltipTrigger asChild>{component}</TooltipTrigger>\n\n          <TooltipPortal>\n            <TooltipContent {...tooltipContentProps}>{tooltip}</TooltipContent>\n          </TooltipPortal>\n        </Tooltip>\n      );\n    }\n\n    return component;\n  });\n}\n"
    }
  ],
  "type": "components:plate-ui"
}