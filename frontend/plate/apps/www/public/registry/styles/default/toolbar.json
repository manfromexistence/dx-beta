{
  "name": "toolbar",
  "dependencies": [
    "@radix-ui/react-toolbar"
  ],
  "registryDependencies": [
    "tooltip",
    "separator"
  ],
  "files": [
    {
      "name": "toolbar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as ToolbarPrimitive from '@radix-ui/react-toolbar';\nimport { cn, withCn, withRef, withVariants } from '@udecode/cn';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nimport { Icons } from '@/components/icons';\n\nimport { Separator } from './separator';\nimport { withTooltip } from './tooltip';\n\nexport const Toolbar = withCn(\n  ToolbarPrimitive.Root,\n  'relative flex select-none items-center gap-1 bg-background'\n);\n\nexport const ToolbarToggleGroup = withCn(\n  ToolbarPrimitive.ToolbarToggleGroup,\n  'flex items-center'\n);\n\nexport const ToolbarLink = withCn(\n  ToolbarPrimitive.Link,\n  'font-medium underline underline-offset-4'\n);\n\nexport const ToolbarSeparator = withCn(\n  ToolbarPrimitive.Separator,\n  'my-1 w-px shrink-0 bg-border'\n);\n\nconst toolbarButtonVariants = cva(\n  cn(\n    'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n    '[&_svg:not([data-icon])]:size-5'\n  ),\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-transparent hover:bg-muted hover:text-muted-foreground aria-checked:bg-accent aria-checked:text-accent-foreground',\n        outline:\n          'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3',\n        sm: 'h-9 px-2',\n        lg: 'h-11 px-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'sm',\n    },\n  }\n);\n\nconst ToolbarButton = withTooltip(\n  // eslint-disable-next-line react/display-name\n  React.forwardRef<\n    React.ElementRef<typeof ToolbarToggleItem>,\n    Omit<\n      React.ComponentPropsWithoutRef<typeof ToolbarToggleItem>,\n      'asChild' | 'value'\n    > &\n      VariantProps<typeof toolbarButtonVariants> & {\n        pressed?: boolean;\n        isDropdown?: boolean;\n      }\n  >(\n    (\n      { className, variant, size, isDropdown, children, pressed, ...props },\n      ref\n    ) => {\n      return typeof pressed === 'boolean' ? (\n        <ToolbarToggleGroup\n          type=\"single\"\n          value=\"single\"\n          disabled={props.disabled}\n        >\n          <ToolbarToggleItem\n            ref={ref}\n            className={cn(\n              toolbarButtonVariants({\n                variant,\n                size,\n              }),\n              isDropdown && 'my-1 justify-between pr-1',\n              className\n            )}\n            value={pressed ? 'single' : ''}\n            {...props}\n          >\n            {isDropdown ? (\n              <>\n                <div className=\"flex flex-1\">{children}</div>\n                <div>\n                  <Icons.arrowDown className=\"ml-0.5 size-4\" data-icon />\n                </div>\n              </>\n            ) : (\n              children\n            )}\n          </ToolbarToggleItem>\n        </ToolbarToggleGroup>\n      ) : (\n        <ToolbarPrimitive.Button\n          ref={ref}\n          className={cn(\n            toolbarButtonVariants({\n              variant,\n              size,\n            }),\n            isDropdown && 'pr-1',\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </ToolbarPrimitive.Button>\n      );\n    }\n  )\n);\nToolbarButton.displayName = 'ToolbarButton';\nexport { ToolbarButton };\n\nexport const ToolbarToggleItem = withVariants(\n  ToolbarPrimitive.ToggleItem,\n  toolbarButtonVariants,\n  ['variant', 'size']\n);\n\nexport const ToolbarGroup = withRef<\n  'div',\n  {\n    noSeparator?: boolean;\n  }\n>(({ className, children, noSeparator }, ref) => {\n  const childArr = React.Children.map(children, (c) => c);\n  if (!childArr || childArr.length === 0) return null;\n\n  return (\n    <div ref={ref} className={cn('flex', className)}>\n      {!noSeparator && (\n        <div className=\"h-full py-1\">\n          <Separator orientation=\"vertical\" />\n        </div>\n      )}\n\n      <div className=\"mx-1 flex items-center gap-1\">{children}</div>\n    </div>\n  );\n});\n"
    }
  ],
  "type": "components:plate-ui"
}